@top Program {
  statement*
}

@skip { space | comment }

statement {
  AreaDeclaration
}

AreaDeclaration {
  kw<"AREA"> commaSep<areaProps> instruction*
}

areaProps {
  AreaName |
  ReadOrWriteArea |
  CodeOrDataArea
}

AreaName {
  identifier
}

ReadOrWriteArea {
  kw<"READWRITE"> | kw<"READONLY">
}

CodeOrDataArea {
  kw<"CODE"> | kw<"DATA">
}

instruction {
  MachineInstruction |
  SymbolicDeclaration |
  PushPopInstruction |
  BranchInstruction |
  AdditionalInstruction
}

SymbolicDeclaration {
  VariableName kw<"EQU"> IntegerLiteral
}

MachineInstruction {
  Label? MachineInstructionName commaSep<machineInstructionArg>
}

PushPopInstruction {
  (kw<"PUSH"> | kw<"POP">) "{" commaSep<RegisterLiteral | RegisterLiteralRange> "}"
}

BranchInstruction {
  BranchInstructionWithLabel |
  BranchInstructionWithoutLabel
}

BranchInstructionWithLabel {
  ( 
    kw<"B"> |
    kw<"BL"> |
    kw<"BEQ"> |
    kw<"BNE"> |
    kw<"BCS"> |
    kw<"BHS"> |
    kw<"BCC"> |
    kw<"BLO"> |
    kw<"BMI"> |
    kw<"BPL"> |
    kw<"BVS"> |
    kw<"BVC"> |
    kw<"BHI"> |
    kw<"BLS"> |
    kw<"BGE"> |
    kw<"BLT"> |
    kw<"BGT"> |
    kw<"BLE"> |
    kw<"BAL">
  )
  Label
}

BranchInstructionWithoutLabel {
  ( 
    kw<"BX"> |
    kw<"BLX">
  )
  RegisterLiteral
}

DataInstructionDeclaration {
    Label (kw<"DCD"> | kw<"DCW"> | kw<"DCB">) IntegerLiteral
}

AdditionalInstruction {
    (Label kw<"MAIN"> |
    kw<"EXPORT"> Label|
    kw<"ENDP">|
    kw<"END">|
    kw<"ALIGN">)
}

MachineInstructionName {
  kw<"MOV"> | 
  kw<"MOVS"> |
  kw<"ADDS"> |
  kw<"ADD"> |
  kw<"ADCS"> |
  kw<"ADR"> |
  kw<"SUBS"> |
  kw<"SBCS"> |
  kw<"RSBS"> |
  kw<"MULS"> |
  kw<"CMP"> |
  kw<"CMN"> |
  kw<"CMP"> |
  kw<"ANDS"> |
  kw<"EORS"> |
  kw<"ORRS"> |
  kw<"BICS"> |
  kw<"MVNS"> |
  kw<"TST"> |
  kw<"LSLS"> |
  kw<"LSRS"> |
  kw<"ASRS"> |
  kw<"RORS"> |
  kw<"LDR"> |
  kw<"LDRH"> |
  kw<"LDRB"> |
  kw<"LDRSH"> |
  kw<"LDRSB"> |
  kw<"LDM"> |
  kw<"STR"> |
  kw<"STRH"> |
  kw<"STRB"> |
  kw<"STM"> |
  kw<"SXTH"> |
  kw<"SXTB"> |
  kw<"UXTH"> |
  kw<"UXTB"> |
  kw<"MRS">
}

machineInstructionArg {
  RegisterLiteral |
  MachInstrIntegerLiteral |
  MachInstrSymbolicLiteral |
  "[" commaSep<machineInstructionArg> "]"
}

Label {
  identifier
}

VariableName {
  identifier
}

commaSep<expr> { expr ("," expr)* }

kw<term> { @specialize[@name="Keyword"]<identifier, term> }

@tokens {

  identifier { $[A-Za-z0-9_]+ }

  RegisterLiteral { "R" $[0-9] | "R1" $[1-2] | "SP" | "LR" | "PC" }

  RegisterLiteralRange { RegisterLiteral space* "-" space* RegisterLiteral }

  digits {
    $[0-9]+
  }

  hexDigits {
    $[A-Fa-f0-9]+
  }

  MachInstrIntegerLiteral {
    "#" space* digits | ("=" space* "0x" | "=" space* "0X") hexDigits
  }

  MachInstrSymbolicLiteral {
    "=" space* identifier
  }

  IntegerLiteral {
    "#" digits | ("0x" | "0X") hexDigits
  }

  @precedence { MachInstrIntegerLiteral MachInstrSymbolicLiteral }

  comment { ";" ![\n]* }
  space { (std.whitespace | "\t" )+ }

  "[" "]"

}
